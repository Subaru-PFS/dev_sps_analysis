#!/usr/bin/python
import getopt
import sys
import pandas as pd
from pfs.detAnalysis import *
import time

from pfs.fileHandling import *
from pfs.detFocusAnalysis import *
import os
import lsst.daf.persistence as dafPersist
import re
from astropy.modeling import models, fitting
from astropy.stats import gaussian_sigma_to_fwhm


def getPeakDataSep(image, cx, cy, EE=None, roi_size=30, mask_size=50, threshold= 500, subpix=5, \
                            doPlot=False, doBck=True, nRows=5, **kwargs):
    if type(image) is str:
        hdulist = fits.open(image, "readonly")
        image = hdulist[1].data

    objlist=[]

    mask = createSepMask(image.shape, cx, cy, mask_size=mask_size)
    obj = sep.extract(image, threshold, mask=mask)
    if len(obj) == 0 :
        df = pd.DataFrame({'cx': [cx], 'cy': [cy]})
        return df

    df = pd.DataFrame(obj, columns=obj.dtype.names)
#    df = df[["flux", "peak", "x", "y", "flag", "npix", "theta"]]
    df = df.rename(columns={'x': 'px','y': 'py', 'peak': 'brightness'})

    if doBck:
        flux_tot, flux_tot_err, flux_tot_flag = sep.sum_circle(image, df['px'], df['py'],
                                         roi_size/2., err=None, gain=1.0, subpix=subpix,bkgann=(roi_size/2., nRows+roi_size/2.))
        df["flux_tot"] = flux_tot

        EE = [3,5] if EE is None else EE
        for ee in EE:
            df["flux_EC%d"%ee], df["fluxErr"], flag = sep.sum_circle(image, df['px'], df['py'],
                                                         ee/2., err=None, gain=1.0, subpix=subpix,
                                                         bkgann=(roi_size/2., nRows+roi_size/2.))
            df["flux_CR%d"%ee], df["fluxErrR%d"%ee], flag = sep.sum_circle(image, df['px'], df['py'],
                                                         np.sqrt(2)*ee/2., err=None, gain=1.0, subpix=subpix,
                                                         bkgann=(roi_size/2., nRows+roi_size/2.))
            df["ECE%d"%ee] = df["flux_EC%d"%ee] / flux_tot
            df["ECR%d"%ee] = df["flux_CR%d"%ee] / flux_tot

    else:
        flux_tot, flux_tot_err, flux_tot_flag = sep.sum_circle(image, df['px'], df['py'],
                                         roi_size/2., err=None, gain=1.0, subpix=subpix)
        df["flux_tot"] = flux_tot

        EE = [3,5] if EE is None else EE
        for ee in EE:
            df["flux_EC%d"%ee], df["fluxErr"], flag = sep.sum_circle(image, df['px'], df['py'],
                                         ee/2., err=None, gain=1.0, subpix=subpix)
            df["ECE%d"%ee] = df["flux_EC%d"%ee] / flux_tot
            df["flux_CR%d"%ee], df["fluxErrR%d"%ee], flag = sep.sum_circle(image, df['px'], df['py'],
                                                         np.sqrt(2)*ee/2., err=None, gain=1.0,
                                                        subpix=subpix)
            df["ECE%d"%ee] = df["flux_EC%d"%ee] / flux_tot
            df["ECR%d"%ee] = df["flux_CR%d"%ee] / flux_tot

    return df


def getImageEncerclEnergy(image, peak_list, roi_size=20, EE=[3,5], mask_size=50, threshold= 50, subpix = 5 , maxPeakDist=80, maxPeakFlux=40000, minPeakFlux=2000, doPlot=False, scalePlot=False, doBck=False, noEE=False):

    if type(image) is list and len(image) == 1 :
        image = image[0]

    if type(image) is str:
        hdulist = fits.open(image, "readonly")
        prihdr = hdulist[0].header
        image = hdulist[1].data

    if peak_list is not None :
        plist = pd.read_csv(peak_list) if type(peak_list) is str else peak_list
        objlist=[]

        for index, row in plist.iterrows():
            cx = row["X"]
            cy = row["Y"]
            try:
                #obj = getFluxPeakDataSep(image, cx,cy, EE=EE, roi_size=roi_size,mask_size=mask_size, subpix=subpix, doBck=doBck)
                obj = getPeakDataSep(image, cx,cy, EE=EE, roi_size=roi_size,mask_size=mask_size,\
                                     subpix=subpix, doBck=doBck)
                obj["cx"] = cx
                obj["cy"] = cy
                obj["peak"] = row["peak"]
                obj["fiber"] = row["fiber"]
                objlist.append(obj)
            except Exception as e:
                print(str(e), "cx:%i, cy:%i"%(cx,cy))
                objlist.append(dict(peak=row["peak"], fiber=row["fiber"]))

        mdata = pd.concat(objlist)
    else : # do it on the whole image so every peak
        obj = sep.extract(image, threshold)
        df = pd.DataFrame(obj, columns=obj.dtype.names)
        df = df[["flux", "peak", "x", "y", "flag", "npix"]]
        df = df.rename(columns={'x': 'px','y': 'py', 'peak': 'brightness'})
        df = removeClosePeak(df, dist=maxPeakDist, doPlot=doPlot)
        df = removeFluxPeak(df, fmax=maxPeakFlux, fmin=minPeakFlux, doPlot=doPlot)
        if noEE != True:
            for (px,py),a in df.groupby(["px", "py"]):
                flux_tot, flux_tot_err, flux_tot_flag = sep.sum_circle(image, df['px'], df['py'],
                                                 roi_size/2., err=None, gain=1.0, subpix=subpix)
                EE = [3,5] if EE is None else EE
                for ee in EE:
                    df["ECE%d"%ee], df["fluxErr"], flag = sep.sum_circle(image, df['px'], df['py'],
                                                 ee/2., err=None, gain=1.0, subpix=subpix)
                    df["ECE%d"%ee] = df["ECE%d"%ee] / flux_tot
        mdata = df



    if doPlot :
        plt_data = mdata[["peak", "fiber", "px", "py"]]
        plt_data = plt_data.rename(columns={'px': 'X','py': 'Y'})

        plotRoiPeak(image, plt_data, roi_size, scale=scalePlot)


    return mdata


# +
def VisitImageQualityToCsv(visit, \
                           peak_list, roi_size, com=True, doBck=True, EE=[3,5], doFit=True, doLSF=False,\
                           cam=None, repo="cluster",rerun="sm1-dither", cluster=False, doPlot=False,\
                           doSep=False, mask_size=50, threshold= 50, subpix = 5 , maxPeakDist=80,\
                           maxPeakFlux=40000, minPeakFlux=2000,\
                          csv_path = "", drpImage=None, experimentId = None, doPrint=False):
    if drpImage is None:
        experimentId = Logbook.visitExperimentId(visit=visit)

        doRaise = True
        try:
            filepath, date = getvisitfilepath(visit, rerun, None, cam, repo, cluster=cluster)
            visitfilepath = filepath
        except IOError:
            if doRaise:
                raise
    else :
        filepath = drpImage[0]
        visitfilepath = drpImage[1]
        visit = drpImage[2]
        try:
            experimentId = Logbook.visitExperimentId(visit=visit)
        except:
            experimentId = np.nan
            print("Unable to get experimentId from logbook")

    data = getImageQuality(filepath, peak_list, roi_size=roi_size, EE=EE, com=com, doPlot=doPlot, doBck=doBck, doFit=doFit, doLSF=doLSF)
    if doSep:
        dsep = getImageEncerclEnergy(filepath, peak_list, roi_size=roi_size, EE=EE,\
        mask_size=mask_size, threshold= threshold, subpix = subpix ,\
        maxPeakDist=maxPeakDist, maxPeakFlux=maxPeakFlux, minPeakFlux=minPeakFlux,\
        doPlot=doPlot, doBck=doBck)
        dsep = dsep.add_prefix("sep_")
        dsep = dsep.rename(columns={'sep_peak': 'peak','sep_fiber': 'fiber'})
        data = data.merge(dsep, on=["peak","fiber"])
    __, fname = os.path.split(visitfilepath)

    data["filename"] = fname
    data["visit"] = visit

#    data["peaklist"] = peak_list

#    data["motor1"] = np.float(getFitsKey(visitfilepath, 'W_XCU_MOTOR1_MICRONS'))
#    data["motor2"] = np.float(getFitsKey(visitfilepath, 'W_XCU_MOTOR2_MICRONS'))
#    data["motor3"] = np.float(getFitsKey(visitfilepath, 'W_XCU_MOTOR3_MICRONS'))
    data["xm1pos"] = np.float(getFitsKey(visitfilepath, 'W_XM1POS'))
    data["xm2pos"] = np.float(getFitsKey(visitfilepath, 'W_XM2POS'))
    data["xm3pos"] = np.float(getFitsKey(visitfilepath, 'W_XM3POS'))
    data["motor1"] = data["xm1pos"]
    data["motor2"] = data["xm2pos"]
    data["motor3"] = data["xm3pos"]
    fcax = np.float(getFitsKey(visitfilepath, 'W_ENFCAX', doRaise=False))
    fcay = np.float(getFitsKey(visitfilepath, 'W_ENFCAY', doRaise=False))
    fcaz = np.float(getFitsKey(visitfilepath, 'W_ENFCAZ', doRaise=False))

    # OneChannel back compatiblity
    fcax = np.float(getFitsKey(visitfilepath, 'HIERARCH W_FCA_FOCUS', doRaise=False)) if np.isnan(fcax) else fcax
    data['fcaFocus'] = fcax
    data['fcaY'] = fcay
    data['fcaZ'] = fcaz

#    feeTemp = np.float(getFitsKey(visitfilepath, 'temps.FEE'))
#    feeTemp = np.float(getFitsKey(visitfilepath, 'HIERARCH temps.FEE', doRaise=False)) if np.isnan(feeTemp) else feeTemp

#    data['feeTemp'] = feeTemp
#    ccdTemp = np.float(getFitsKey(visitfilepath, 'temps.CCD0'))
#    ccdTemp = np.float(getFitsKey(visitfilepath, 'HIERARCH temps.CCD0', doRaise=False)) if np.isnan(ccdTemp) else ccdTemp
#    data['ccdTemp'] = ccdTemp
    data['cam'] = cam
    data['obsdate'] = getFitsKey(visitfilepath, 'DATE-AVG')
    data['experimentId'] = experimentId

    now = datetime.now() # current date and time\n",
    date_time = now.strftime("%Y%m%dT%Hh%M")

    csvName = f"Imquality_{cam}_Exp{experimentId}_{visit}_{date_time}.csv"
    if not os.path.exists(csv_path):
        os.makedirs(csv_path)
    data.to_csv(csv_path+csvName)
    if doPrint:
        print(csv_path+csvName)

    return

def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False

# +
def main(argv):
    visit = ''
    peak = ''
    outpath = ''
    rerun = ''
    doBck = ''
    try:
        opts, args = getopt.getopt(argv,"hv:p:c:o:r:b:",["visit=","peak=", "cam=", "outpath=", "rerun=", "doBck="])
    except getopt.GetoptError:
        print('Cluster_GetIMqual.py -v <visit> -p <peakfile> -c <cam> -r <rerun>')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print('Cluster_GetIMqual.py -v <visit> -p <peakfile> -c <cam>')
            sys.exit()
        elif opt in ("-v", "--visit"):
            visit = int(arg)
        elif opt in ("-p", "--peak"):
            peaklist = arg
        elif opt in ("-c", "--cam"):
            cam = arg
        elif opt in ("-o", "--outpath"):
            outpath = arg
        elif opt in ("-r", "--rerun"):
            rerun = arg
        elif opt in ("-b", "--doBck"):
            doBck = str2bool(arg)



    outpath = "output\\" if outpath is None else outpath

    # define defaut parameters
    roi_size = 24
    com = True  # Center Of Mass
#    doBck = True
    head = 0
    tail = 0
    criteria = 'EE5'
    verbose = False
    doPrint = False
    arm = cam[0]

    drpPath = "/drp/cluster"
    repo = "repo"
    basePath = '/drp/fmadec/analysis/subaru/sm1/'
#    repo = "repo-newfoc-20200721"
#    basePath = '/drp/fmadec/analysis/subaru/sm1-newfoc-20200721/'
    extra = ''

    try:
            experimentId = Logbook.visitExperimentId(visit=visit)
    except:
            experimentId = np.nan
            print("Unable to get experimentId from logbook")

    csvPath = basePath+"Exp"+str(experimentId)+"/"+rerun+"_roi"+str(roi_size)+"/doBck"+str(doBck)+"/"+extra
    print(csvPath)

#    peakPath ="/home/fmadec/dev/ait-notebook/optical/input/"
#    peaklist = peakPath+peaklist
    peaklist = "/drp/cluster/devel/ait-notebook/fmadec/Subaru/SM1/selectLines/Imqual_LAM_peaklist_2020July.csv"

#   VisitImageQualityToCsv(visit, peaklist, roi_size, cam=cam, \
#                          repo="sm1",rerun="ginga",  cluster=True, \
#                          com=True, doBck=True, EE=[3,5], doFit=True, doLSF=False,
#                          csv_path = outpath)

    print(f'Start visit {visit} of {cam} with {peaklist}')
    print(f'Rerun {rerun}')
    print(f'doBck {doBck}')
    print(f"{drpPath}/{repo}/rerun/{rerun}/detrend/")
    print(f"\n experimentId {experimentId}\n")

    butler = dafPersist.Butler(f"{drpPath}/{repo}/rerun/{rerun}/detrend/")
    rbutler = dafPersist.Butler(f"{drpPath}/{repo}/")
    rbutler.getKeys('raw')
    lamps = rbutler.queryMetadata('raw', ['lamps'], visit=visit, arm=arm)
    calExp = butler.get("calexp", visit=visit, arm=cam[0])

    peaks = pd.read_csv(peaklist)
    selected_peaks = peaks[peaks.arm == arm]
    selected_peaks = selected_peaks[(selected_peaks.element.str.contains('|'.join(re.findall('[A-Z][^A-Z]*', "".join(lamps)))))]

    visit = int(visit)
    calExp = butler.get("calexp", visit=visit, arm=cam[0])
    calexfilePath = butler.getUri("calexp", visit=visit, arm=cam[0])
    if verbose:
        print(calexfilePath)

    VisitImageQualityToCsv(visit, selected_peaks, roi_size,\
                           drpImage=[ calExp.image.array, calexfilePath, visit],\
                           com=com, doBck=doBck, EE=[3,5], doFit=True, doLSF=True,\
                           cam=cam, repo=None,rerun=None, cluster=False, doPlot=False,\
                           doSep=True, mask_size=20, threshold= 50, subpix = 5 , maxPeakDist=80,\
                           maxPeakFlux=40000, minPeakFlux=2000,\
                          csv_path = csvPath, experimentId=experimentId, doPrint=verbose)
# -



if __name__ == "__main__":
    start = time.time()
    main(sys.argv[1:])
    finish = time.time()
    elapsed = finish - start
    print(f"Time elapsed: {elapsed}")
